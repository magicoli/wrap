#!/bin/sh

PGM=`basename "$0"`
TMP="/tmp/$PGM.$$"
LOG=/tmp/$PGM

EXT="*"

OPTS="HDQ-:s:"

PAR=`echo $OPTS|sed 's/.://g'|grep -v "^$"|sed "s/\([a-zA-Z0-9]*\)/[-\\1]/g" `
PAROPT=`echo $OPTS | sed "s/-://" | sed 's/\(.\)/\\1\//g' \
    | sed 's/\(.\)\/:\//[-\\1 <value>] /g' \
    | sed "s/.\///g" `
USAGE=`echo $PGM $PAR $PAROPT "[<args>]" | sed "s/  / /g"`


help() {
    usage
    echo "      -s <suffix> add suffix"
    echo "      --large add '-large' suffix"
    echo "      --mp4 extension .mp4"
    echo "      --mov extension .mov"
	echo "		--check if movie file is valid"
    echo "      -H display this help"
    echo "      -D debug mode"
    echo "      -Q quiet mode"
    echo
    echo "sorry, helpman is in a minimalist mood"
    exit 0
}

usage() {
    echo "usage: $USAGE"
}

log() {
    if [ "$LOG" ]
        then
        ERRNUM=`echo "$@" |grep "^[0-9]* "|cut -d " " -f 1`
        ERR=`echo $ERRNUM|sed "s/\([0-9]*\)/<\\1\> /"`
        [ "$ERRNUM" ] && shift
        LOGMESSAGE=$@
        LOGLINE=`date +"%b %e %H:%M:%S"`" $PGM[$$]: $ERR$LOGMESSAGE"
        [ "$LOGGING" = "yes" ] && (echo $LOGLINE >> $LOG.log)
        if [ "$ERRNUM" ]
            then
            echo "$PGM: $LOGMESSAGE ($ERRNUM)" >&2
        elif [ "$DEBUG" = "yes" ]
            then
            echo "$PGM: $LOGMESSAGE" >&2
        fi
    else
        echo "LOG variable not set"
        exit 1
    fi
}

end() {
    ERRNUM=$1
    if [ "$ERRNUM" != "" -a "$ERRNUM" = "`echo $ERRNUM|sed 's/[^0-9]//g'`" ]
        then
        ERRNUM=`expr $ERRNUM + 0`
        shift
        [ "$#" -gt 0 ]  && log "<$ERRNUM>" $@
    else
        ERRNUM=
        if [ "$#" -gt 0 ]
            then
            log $@
	elif [ "$DEBUG" = "yes" ]
	    then
	    log "End processing"
        fi
    fi
    rm -f $TMP*
    rm -f $LOG.lock
    exit $ERRNUM
}

isvalid() {
	file=$1
	errors=`ffmpeg -i "$file" 2>&1 | tail | egrep "Unknown format|Error" | sed "s/.*://"`
	if [ "$errors" ] 
		then
		echo "$errors"
		return 1
	fi
	return 0
}

isfree() {
	file=$1
	fuserid="$(fuser "$file" 2>&1 | grep ": " | sed "s/^[^:]*: //")"
	if [ "$fuserid" ]
		then
		echo "in use ($fuserid)"
		return 2
	fi
	return 0
}

while getopts $OPTS PARAM
  do
    case $PARAM in
	"?")
	    ERROR=1
	    ;;
	-)
	    case $OPTARG in
		help)
		    help
		    ;;
		avi)
		    EXT=avi
		    ;;
		mov)
		    EXT=mov
		    ;;
		mp4)
		    EXT=mp4
		    ;;
		large)
	    	suffix="-large"
			;;
		check)
			check="true"
			;;
		*)
		    printf "$PGM: illegal option -- $OPTARG"
#		    ERROR=1
	    esac
	    ;;
	s)
		suffix="-$OPTARG"
		;;
	H)
	    help
	    ;;
	D)
#		    echo "Debug mode"
	    STDERR="&1"
	    DEBUG=yes
	    ;;
	Q)
	    STDOUT="/dev/null"
	    DEBUG=no
	            ;;
	*)
	    VALUES="$VALUES $PARAM"
	    LASTVAL=$PARAM
    esac

done 2>/dev/null

shift `expr $OPTIND - 1`

if [ $ERROR ]
then
    usage
    end "$ERROR   type '$PGM --help' for more info"
fi

scratch=$1
dest=$2
[ "$dest" ] || dest="$PWD"
	
[ ! -d "$scratch" ] && echo "Must specify valid source" >&2 && exit 1
[ ! -d "$dest" ] && echo "Destination $dest is not valid" >&2 && exit 2

scratch=`echo "$scratch" | sed "s/\/*$//"`
dest=`echo "$dest" | sed "s/\/*$//"`

echo "From $scratch"
echo "To   $dest"
echo "Ext  $EXT"

ls -rt "$scratch" | grep "\.$EXT$" > "$TMP.list"
# cat "$TMP.list"
# exit

firstfile=$(head -1 "$TMP.list")
lastfile=$(tail -1 "$TMP.list")
count=`cat $TMP.list | wc -l`
[ $count -gt 1 ] && s=s
[ $count -lt 1 ] && echo "nothing to move" && exit

echo $count "file$s "
(
echo " from $firstfile"
echo "   to $lastfile"
) | cut -c -80

printf "checking last one: "

isvalid "$scratch/$lastfile" \
&& printf "valid " \
&& isfree "$scratch/$lastfile" \
&& echo "movable"

if [ $? -ne 0 ]
	then
	cat "$TMP.list" | grep -v "^$lastfile" > "$TMP.move"
else
	cat "$TMP.list" > "$TMP.move"
fi

cat "$TMP.move" | while read file
do
	[ -f "$scratch/$file" ] || continue
	printf "$file "
	isvalid "$file" || continue
	name=`echo "$file" | sed "s/\.[a-zA-Z0-9]*$//"`
	extension=`echo "$file" | sed "s/.*\.\([a-zA-Z0-9]*\)$/\\1/"`
	newfile="$dest/$name$suffix.$extension"
	mv "$scratch/$file" "$newfile" && echo "=> $name$suffix.$extension"
done

rm "$TMP".*
